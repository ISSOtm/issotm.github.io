
/*
 * REVERSING ZZAZZ'S 2017 APRIL FOOLS
 *
 * KEYGEN BY ISSOtm
 * CAPS LOCK BY WHOEVER INVENTED IT
 * STEAL THIS CODE IF YOU WANT, I DON'T CARE THE SLIGHTEST
 * BUT PLEASE AT LEAST PUT MY NAME IN A COMMENT ON THE THIRD OR FOURTH LINE OF YOUR CODE
 * SECOND LINE SUCKS
 * FIRST LINE SHOULD BE BLANK
 *
 * PLEASE KILL MEEEEEE
 *
 * Warning : contains lots of SBAHJ references.
 * People not knowing MSPA should get themselves a gap year to read Homestuck before using this.
 */

'use strict';


var hexToDecTable = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];
function decToHex(dec) {
	if(dec < 0 || dec > 255) {
		throw new Error('Fatal byte error');
	}
	
	var hex = '';
	while(dec > 0) {
		hex = hexToDecTable[(dec % 16)] + hex;
		dec = Math.floor(dec / 16);
	}
	
	if(hex.length == 1) {
		return '0' + hex;
	}
	
	if(hex == '') {
		return '00';
	}
	
	return hex;
}

function generateBuffer(e) {
	e.preventDefault();
	
	var i = 1, achievement = 0;
	for(i = 6; i != 0; i--) {
		achievement *= 2;
		if(document.getElementById('achievement' + i).checked) {
			achievement++;
		}
	}
	
	var time = decToHex(parseInt(document.getElementById('minutes').value)) + decToHex(parseInt(document.getElementById('seconds').value)),
		randval = decToHex(Math.floor(Math.random() * 128) * 2);
	
	document.getElementById('preEncode').value = decToHex(achievement) + randval + time + "0000";
}


function hexToDec(hex) {
	hex = hex.toUpperCase();
	var dec = 0, i = 0, n = hex.length;
	for(i = 0; i < n; i++) {
		dec = dec * 16 + hexToDecTable.indexOf(hex[i]);
	}
	
	return dec;
}

var symbolTable = {
	0x60: 'A',
	0x61: 'B',
	0x62: 'C',
	0x63: 'D',
	0x64: 'E',
	0x65: 'F',
	0x66: 'G',
	0x67: 'H',
	0x68: 'I',
	0x69: 'V',
	0x6A: 'S',
	0x6B: 'L',
	0x6C: 'M',
	0xF8: '2',
	0xFC: '6',
	0xFD: '7'
};
function getSymbolFromHex(hex) {
	return symbolTable[hex];
}


function getLowNibble(value) {
	return value % 16;
}

function getHighNibble(value) {
	return Math.floor(value / 16);
}


var encodeTable = [0x67, 0x61, 0x64, 0x60, 0x69, 0x6B, 0x66, 0x65, 0x62, 0x6A, 0x63, 0x68, 0x6C, 0xF8, 0xFC, 0xFD];
function encodeNibble(nibble) {
	return encodeTable[nibble];
}

function encodeByte(rawByte, outputTable) {
	outputTable.push(encodeNibble(getLowNibble(rawByte)));
	outputTable.push(encodeNibble(getHighNibble(rawByte)));
}

var encodeTable2 = [0xB4, 0x6B, 0xCB, 0xDE, 0xB8, 0x74, 0xE1, 0x51, 0x59, 0x3D, 0x66, 0xDD, 0xF3, 0xDA, 0x9D, 0x3F, 0x08, 0x0A, 0xE6, 0xBB, 0x68, 0x21, 0x79, 0xF1, 0xF2, 0xC3, 0x69, 0xF5, 0x44, 0x9F, 0xAA, 0x77, 0x62, 0xD1, 0x2E, 0x00, 0x82, 0x52, 0xBD, 0x57, 0x86, 0x76, 0x34, 0x84, 0x64, 0x31, 0x10, 0xFD, 0xAD, 0xA9, 0xEA, 0x01, 0x9A, 0x53, 0xE8, 0x7B, 0x9B, 0x0D, 0x56, 0x22, 0x50, 0xB1, 0x61, 0xF7, 0x94, 0xCE, 0x16, 0xD5, 0x90, 0x91, 0xC7, 0xD8, 0xF9, 0x3A, 0xC5, 0x36, 0x8B, 0x73, 0x03, 0xAF, 0x37, 0x38, 0xA1, 0x7A, 0x72, 0xC8, 0xB0, 0x02, 0x43, 0x63, 0xD7, 0x1D, 0x24, 0x85, 0x25, 0xA8, 0x46, 0xE4, 0xE0, 0x33, 0xAC, 0xC0, 0xA7, 0x6D, 0xF4, 0x95, 0x0F, 0x4E, 0xD6, 0x41, 0xB6, 0x99, 0x1B, 0x2D, 0x78, 0x8C, 0x97, 0xE9, 0x28, 0x4F, 0xE3, 0x6C, 0x1E, 0x9E, 0xB5, 0x11, 0xCC, 0x87, 0x7C, 0xA2, 0x47, 0x8D, 0xEB, 0x70, 0x8E, 0xA3, 0x81, 0xFE, 0x4C, 0x5A, 0x8F, 0x5E, 0x4A, 0x5B, 0xEC, 0x15, 0x20, 0xD0, 0x13, 0xFC, 0x92, 0x58, 0x7E, 0x4B, 0x49, 0x05, 0x09, 0x88, 0x30, 0x89, 0x5F, 0xAB, 0x75, 0x26, 0x80, 0xD2, 0x17, 0x8A, 0x60, 0xAE, 0xCF, 0xBE, 0x96, 0x55, 0x54, 0x07, 0xED, 0x0C, 0x9C, 0xCD, 0xBA, 0xA5, 0x32, 0x2A, 0x29, 0x35, 0x12, 0x83, 0x27, 0xEE, 0xC9, 0x7F, 0x98, 0xE5, 0xB9, 0x19, 0xC6, 0x3E, 0x0E, 0x42, 0x0B, 0xB7, 0x1A, 0xA4, 0x6A, 0x2C, 0xE2, 0xD3, 0xF8, 0xCA, 0x18, 0xF0, 0xDF, 0xDC, 0x23, 0x1C, 0x3B, 0x48, 0xBC, 0xFB, 0xB2, 0x65, 0xEF, 0x6E, 0xFA, 0xDB, 0xF6, 0x14, 0x71, 0x6F, 0xD4, 0x5D, 0x5C, 0x4D, 0x93, 0xFF, 0xD9, 0x39, 0x45, 0x40, 0x2F, 0xE7, 0x67, 0x04, 0xC4, 0xB3, 0xA6, 0x7D, 0xC2, 0x2B, 0xC1, 0xBF, 0x1F, 0x06, 0x3C, 0xA0];
function encodeByte2(rawByte) {
	return encodeTable2[rawByte];
}

function linearObfuscate(a) {
	var bc = 0x41A7, hl = 0x72D4;
	do {
		hl += bc;
		if(!a--) {
			a = 255;
		}
	} while(a);
	return hl & 0xFF;
}


function fallDownStairs(stairs) {
	stairs.preventDefault();
	
	var stdin  = document.getElementById('preEncode'),
		stdout = document.getElementById('outputCode'),
		i = 0;
	
	
	var preEncodeBuf = [],
		preEncodeStr = stdin.value.toUpperCase();
	
	if(!preEncodeStr.match(/[0-9A-F]{12}/)) {
		alert('Invalid input length ! Must be 12 chars long, no spaces.');
		throw new Error('Fatal error.');
	}
	
	for(i = 0; i < 12; i++) {
		var hex = preEncodeStr[i++] + preEncodeStr[i];
		preEncodeBuf.push(hexToDec(hex));
	}
	
	var obfEncodeBuf = [],
		a = preEncodeBuf[0] & 0x3F;
	
	obfEncodeBuf.push(encodeByte2(a ^ 0x55));
	var key = [null, 0xAA, 0xF0, 0x0F];
	for(i = 1; i < 4; i++) {
		obfEncodeBuf.push(encodeByte2(preEncodeBuf[i] ^ key[i]));
	}
	
	var b = 0xC7, c = 0x8A;
	obfEncodeBuf.forEach(function(e) {
		b = (b + e) % 256;
		c = (c ^ e) % 256;
	});
	
	b = linearObfuscate(b);
	c = linearObfuscate(c);
	console.log(obfEncodeBuf);
	
	obfEncodeBuf.forEach(function(e, i) {
		obfEncodeBuf[i] = e ^ c;
	});
	
	obfEncodeBuf.push(b);
	obfEncodeBuf.push(c);
	
	var outputBuf = [];
	obfEncodeBuf.forEach(function(e) {
		encodeByte(e, outputBuf);
	});
	
	stdout.value = '';
	outputBuf.forEach(function(e) {
		stdout.value += getSymbolFromHex(e);
	});
}


document.onreadystatechange = function() {
	if(document.readyState == "complete") {
		document.getElementById('dros').onsubmit = generateBuffer;
		document.getElementById('sord').onsubmit = fallDownStairs;
	}
}
